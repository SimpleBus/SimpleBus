name: Tests

on: [ push ]

env:
    COMPOSER_ROOT_VERSION: "dev-main"

jobs:
    build-matrix:
        runs-on: ubuntu-20.04
        steps:
            -   uses: actions/checkout@v2.4.0
            -   uses: shivammathur/setup-php@2.16.0
                with:
                    tools: flex
                    php-version: 8.0
                    ini-values: "memory_limit=-1, error_reporting=-1, display_errors=On"
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            -   name: Install dependencies
                uses: ramsey/composer-install@1.3.0
            -   run: vendor/bin/monorepo-builder validate
            -   id: set-packages
                run: echo "::set-output name=packages::$(vendor/bin/monorepo-builder packages-json)"
            -   id: set-php-version
                run: echo "::set-output name=php-version::$(vendor/bin/easy-ci php-versions-json | sed 's/]$/,"8.1"]/')"
            -   id: set-symfony-version
                run: echo '::set-output name=symfony-version::["5.3.*", "5.4.*"]'
        outputs:
            packages: ${{ steps.set-packages.outputs.packages }}
            php-version: ${{ steps.set-php-version.outputs.php-version }}
            symfony-version: ${{ steps.set-symfony-version.outputs.symfony-version }}

    tests:
        needs: build-matrix
        runs-on: ubuntu-20.04
        strategy:
            fail-fast: false
            matrix:
                php-version: ${{ fromJson(needs.build-matrix.outputs.php-version) }}
                package: ${{ fromJson(needs.build-matrix.outputs.packages) }}
                symfony-version: ${{ fromJson(needs.build-matrix.outputs.symfony-version) }}
                dependencies:
                    - 'lowest'
                    - 'highest'
                remove-dependencies: [ '' ]
                include:
                    -   php-version: '8.0'
                        package: 'symfony-bridge'
                        symfony-version: '5.3.*'
                        dependencies: 'lowest'
                        remove-dependencies: '--dev symfony/proxy-manager-bridge'
                exclude:
                    # Only test once it has no Symfony packages
                    -   package: 'asynchronous'
                        symfony-version: '4.4.*'
                    -   package: 'message-bus'
                        symfony-version: '4.4.*'
                    -   package: 'serialization'
                        symfony-version: '4.4.*'
        services:
            rabbitmq:
                image: rabbitmq:3.8-alpine
                env:
                    RABBITMQ_DEFAULT_USER: guest
                    RABBITMQ_DEFAULT_PASS: guest
                ports:
                    - 5672:5672
        steps:
            -   uses: actions/checkout@v2.4.0

            -   uses: shivammathur/setup-php@2.16.0
                with:
                    tools: flex
                    php-version: ${{ matrix.php-version }}
                    ini-values: "memory_limit=-1, error_reporting=-1, display_errors=On"
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   run: composer validate
            -   name: Install core dependencies
                uses: ramsey/composer-install@1.3.0
                env:
                    SYMFONY_REQUIRE: "${{ matrix.symfony-version }}"
            -   run: vendor/bin/monorepo-builder localize-composer-paths packages/${{ matrix.package }}/composer.json --ansi
            -   run: vendor/bin/monorepo-builder bump-interdependency dev-main

            -   if: "matrix.remove-dependencies != ''"
                name: Remove dependencies
                run: composer --working-dir=packages/${{ matrix.package }} remove --no-update ${{ matrix.remove-dependencies }}

            -   run: composer validate
                working-directory: packages/${{ matrix.package }}
            -   name: Install package dependencies
                uses: ramsey/composer-install@1.3.0
                env:
                    SYMFONY_REQUIRE: "${{ matrix.symfony-version }}"
                with:
                    dependency-versions: ${{ matrix.dependencies }}
                    composer-options: '--working-dir=packages/${{ matrix.package }}'

            -   run: vendor/bin/phpunit
                working-directory: packages/${{ matrix.package }}

    php-cs-fixer:
        runs-on: ubuntu-20.04
        steps:
            -   uses: actions/checkout@v2.4.0
            -   uses: shivammathur/setup-php@2.16.0
                with:
                    tools: flex
                    php-version: 8.0
                    ini-values: "memory_limit=-1, error_reporting=-1, display_errors=On"
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            -   name: Install dependencies
                uses: ramsey/composer-install@1.3.0
                env:
                    SYMFONY_REQUIRE: "${{ matrix.symfony-version }}"
            -   run: vendor/bin/php-cs-fixer fix --ansi --diff --dry-run

    phpstan:
        needs: build-matrix
        runs-on: ubuntu-20.04
        strategy:
            fail-fast: false
            matrix:
                php-version: ${{ fromJson(needs.build-matrix.outputs.php-version) }}
                symfony-version: ${{ fromJson(needs.build-matrix.outputs.symfony-version) }}
                dependencies:
                    - 'lowest'
                    - 'highest'
        steps:
            -   uses: actions/checkout@v2.4.0
            -   uses: shivammathur/setup-php@2.16.0
                with:
                    tools: flex
                    php-version: ${{ matrix.php-version }}
                    ini-values: "memory_limit=-1, error_reporting=-1, display_errors=On"
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            -   name: Install core dependencies
                uses: ramsey/composer-install@1.3.0
                env:
                    SYMFONY_REQUIRE: "${{ matrix.symfony-version }}"
                with:
                    dependency-versions: ${{ matrix.dependencies }}
            -   run: vendor/bin/phpstan analyse --ansi
